version: '1.0.0-{build}'

environment:
  APPVEYOR_SAVE_CACHE_ON_ERROR: true
  MY_APPVEYOR_TOKEN:
    secure: 2PvGv32nyzrFBQk3n36Dz3BGUeOsMiy9KHUFJ8FliY4=

init:
- ps: |
    $version = $env:APPVEYOR_BUILD_VERSION.Split('-')[0]
    $date = Get-Date -Format "yyyyMMdd"
    Update-AppveyorBuild -Version "$version.$date-beta-$env:APPVEYOR_BUILD_NUMBER"
    Write-Host $env:APPVEYOR_BUILD_VERSION
    iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
    Write-Host "APPVEYOR = "$env:APPVEYOR
    Write-Host "CI = "$env:CI
    Write-Host "APPVEYOR_API_URL = "$env:APPVEYOR_API_URL
    Write-Host "APPVEYOR_ACCOUNT_NAME = "$env:APPVEYOR_ACCOUNT_NAME
    Write-Host "APPVEYOR_PROJECT_ID = "$env:APPVEYOR_PROJECT_ID
    Write-Host "APPVEYOR_PROJECT_NAME = "$env:APPVEYOR_PROJECT_NAME
    Write-Host "APPVEYOR_PROJECT_SLUG = "$env:APPVEYOR_PROJECT_SLUG
    Write-Host "APPVEYOR_BUILD_FOLDER = "$env:APPVEYOR_BUILD_FOLDER
    Write-Host "APPVEYOR_BUILD_ID = "$env:APPVEYOR_BUILD_ID
    Write-Host "APPVEYOR_BUILD_NUMBER = "$env:APPVEYOR_BUILD_NUMBER
    Write-Host "APPVEYOR_BUILD_VERSION = "$env:APPVEYOR_BUILD_VERSION
    Write-Host "APPVEYOR_BUILD_WORKER_IMAGE = "$env:APPVEYOR_BUILD_WORKER_IMAGE
    Write-Host "APPVEYOR_PULL_REQUEST_NUMBER = "$env:APPVEYOR_PULL_REQUEST_NUMBER
    Write-Host "APPVEYOR_PULL_REQUEST_TITLE = "$env:APPVEYOR_PULL_REQUEST_TITLE
    Write-Host "APPVEYOR_PULL_REQUEST_HEAD_REPO_NAME = "$env:APPVEYOR_PULL_REQUEST_HEAD_REPO_NAME
    Write-Host "APPVEYOR_PULL_REQUEST_HEAD_REPO_BRANCH = "$env:APPVEYOR_PULL_REQUEST_HEAD_REPO_BRANCH
    Write-Host "APPVEYOR_PULL_REQUEST_HEAD_COMMIT = "$env:APPVEYOR_PULL_REQUEST_HEAD_COMMIT
    Write-Host "APPVEYOR_JOB_ID = "$env:APPVEYOR_JOB_ID
    Write-Host "APPVEYOR_JOB_NAME = "$env:APPVEYOR_JOB_NAME
    Write-Host "APPVEYOR_JOB_NUMBER = "$env:APPVEYOR_JOB_NUMBER
    Write-Host "APPVEYOR_REPO_PROVIDER = "$env:APPVEYOR_REPO_PROVIDER
    Write-Host "APPVEYOR_REPO_SCM = "$env:APPVEYOR_REPO_SCM
    Write-Host "APPVEYOR_REPO_NAME = "$env:APPVEYOR_REPO_NAME
    Write-Host "APPVEYOR_REPO_BRANCH = "$env:APPVEYOR_REPO_BRANCH
    Write-Host "APPVEYOR_REPO_TAG = "$env:APPVEYOR_REPO_TAG
    Write-Host "APPVEYOR_REPO_TAG_NAME = "$env:APPVEYOR_REPO_TAG_NAME
    Write-Host "APPVEYOR_REPO_COMMIT = "$env:APPVEYOR_REPO_COMMIT
    Write-Host "APPVEYOR_REPO_COMMIT_AUTHOR = "$env:APPVEYOR_REPO_COMMIT_AUTHOR
    Write-Host "APPVEYOR_REPO_COMMIT_AUTHOR_EMAIL = "$env:APPVEYOR_REPO_COMMIT_AUTHOR_EMAIL
    Write-Host "APPVEYOR_REPO_COMMIT_TIMESTAMP = "$env:APPVEYOR_REPO_COMMIT_TIMESTAMP
    Write-Host "APPVEYOR_REPO_COMMIT_MESSAGE = "$env:APPVEYOR_REPO_COMMIT_MESSAGE
    Write-Host "APPVEYOR_REPO_COMMIT_MESSAGE_EXTENDED = "$env:APPVEYOR_REPO_COMMIT_MESSAGE_EXTENDED
    Write-Host "APPVEYOR_SCHEDULED_BUILD = "$env:APPVEYOR_SCHEDULED_BUILD
    Write-Host "PLATFORM = "$env:PLATFORM
    Write-Host "CONFIGURATION = "$env:CONFIGURATION
    Write-Host "APPVEYOR_SAVE_CACHE_ON_ERROR = "$env:APPVEYOR_SAVE_CACHE_ON_ERROR

# Do not build feature branch with open Pull Requests
skip_branch_with_pr: true

image: 
  #- Ubuntu1804
  - Visual Studio 2017

configuration: Release

platform: 
  #- x64
  - x86

matrix:
  #fast_finish: true
  exclude:
    - image: Ubuntu1804
      platform: x86

install:
  - pwd
  - ls

build_script:
  - cmd: echo windows > artifacts.txt
  - sh: echo ubuntu > artifacts.txt

after_build:
- ps: |
    if ($isWindows -And $env:PLATFORM -eq "x86") {
        $apiUrl = 'https://ci.appveyor.com/api'
        $token = $env:MY_APPVEYOR_TOKEN
        $headers = @{
          "Authorization" = "Bearer $token"
          "Content-type" = "application/json"
        }
        $accountName = 'shimat'
        $projectSlug = 'appveyor_sandbox'

        $downloadLocation = 'C:\projects'

        # get project with last build details
        $project = Invoke-RestMethod -Method Get -Uri "$apiUrl/projects/$accountName/$projectSlug" -Headers $headers

        # we assume here that build has a single job
        # get this job id
        $jobId = $project.build.jobs[0].jobId

        # get job artifacts (just to see what we've got)
        $artifacts = Invoke-RestMethod -Method Get -Uri "$apiUrl/buildjobs/$jobId/artifacts" -Headers $headers

        # here we just take the first artifact, but you could specify its file name
        # $artifactFileName = 'MyWebApp.zip'
        $artifactFileName = $artifacts[0].fileName

        # artifact will be downloaded as
        $localArtifactPath = "$downloadLocation\$artifactFileName"

        # download artifact
        # -OutFile - is local file name where artifact will be downloaded into
        # the Headers in this call should only contain the bearer token, and no Content-type, otherwise it will fail!
        Invoke-RestMethod -Method Get -Uri "$apiUrl/buildjobs/$jobId/artifacts/$artifactFileName" `
        -OutFile $localArtifactPath -Headers @{ "Authorization" = "Bearer $token" }
    } else {
    }

artifacts:
  - path: artifacts.txt
